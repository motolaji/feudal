{"version":3,"sources":["../../../../src/commands/run/ios/runIos.ts"],"names":["isMac","process","platform","runIosActionAsync","projectRoot","options","Log","warn","chalk","cyan","fs","existsSync","path","join","install","platforms","props","isSimulator","IOSDeploy","assertInstalledAsync","buildOutput","XcodeBuild","buildAsync","binaryPath","getAppBinaryPath","shouldStartBundler","metroPort","port","bundleIdentifier","getBundleIdentifierForBinaryAsync","ExpoLogFormatter","logPrettyItem","bold","device","name","SimControl","installAsync","udid","dir","openInSimulatorAsync","installOnDeviceAsync","bundle","appDeltaDirectory","getAppDeltaDirectory","deviceName","nested","dim","builtInfoPlistPath","CFBundleIdentifier","Simulator","streamLogsAsync","schemes","length","scheme","debug","result","openProjectAsync","devClient","skipNativeLogs","success","CommandError","error","openBundleIdAsync","status","activateSimulatorWindowAsync","stderr"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport fs from 'fs-extra';\nimport * as path from 'path';\nimport { SimControl, Simulator } from 'xdl';\n\nimport CommandError from '../../../CommandError';\nimport Log from '../../../log';\nimport { getSchemesForIosAsync } from '../../../schemes';\nimport { EjectAsyncOptions, prebuildAsync } from '../../eject/prebuildAsync';\nimport { profileMethod } from '../../utils/profileMethod';\nimport { parseBinaryPlistAsync } from '../utils/binaryPlist';\nimport { isDevMenuInstalled } from '../utils/isDevMenuInstalled';\nimport { ExpoLogFormatter } from './ExpoLogFormatter';\nimport * as IOSDeploy from './IOSDeploy';\nimport maybePromptToSyncPodsAsync from './Podfile';\nimport * as XcodeBuild from './XcodeBuild';\nimport { Options, resolveOptionsAsync } from './resolveOptionsAsync';\nimport { startBundlerAsync } from './startBundlerAsync';\n\nconst isMac = process.platform === 'darwin';\n\nexport async function runIosActionAsync(projectRoot: string, options: Options) {\n  if (!isMac) {\n    // TODO: Prompt to use EAS?\n\n    Log.warn(\n      `iOS apps can only be built on macOS devices. Use ${chalk.cyan`eas build -p ios`} to build in the cloud.`\n    );\n    return;\n  }\n\n  // If the project doesn't have native code, prebuild it...\n  if (!fs.existsSync(path.join(projectRoot, 'ios'))) {\n    await prebuildAsync(projectRoot, {\n      install: true,\n      platforms: ['ios'],\n    } as EjectAsyncOptions);\n  } else {\n    await maybePromptToSyncPodsAsync(projectRoot);\n    // TODO: Ensure the pods are in sync -- https://github.com/expo/expo/pull/11593\n  }\n\n  const props = await resolveOptionsAsync(projectRoot, options);\n  if (!props.isSimulator) {\n    // Assert as early as possible\n    await IOSDeploy.assertInstalledAsync();\n  }\n\n  const buildOutput = await profileMethod(XcodeBuild.buildAsync, 'XcodeBuild.buildAsync')(props);\n\n  const binaryPath = await profileMethod(\n    XcodeBuild.getAppBinaryPath,\n    'XcodeBuild.getAppBinaryPath'\n  )(buildOutput);\n\n  if (props.shouldStartBundler) {\n    await startBundlerAsync(projectRoot, {\n      metroPort: props.port,\n    });\n  }\n  const bundleIdentifier = await profileMethod(getBundleIdentifierForBinaryAsync)(binaryPath);\n\n  if (props.isSimulator) {\n    ExpoLogFormatter.logPrettyItem(`${chalk.bold`Installing`} on ${props.device.name}`);\n    await SimControl.installAsync({ udid: props.device.udid, dir: binaryPath });\n\n    await openInSimulatorAsync({\n      projectRoot,\n      bundleIdentifier,\n      device: props.device,\n      shouldStartBundler: props.shouldStartBundler,\n    });\n  } else {\n    await IOSDeploy.installOnDeviceAsync({\n      bundle: binaryPath,\n      appDeltaDirectory: IOSDeploy.getAppDeltaDirectory(bundleIdentifier),\n      udid: props.device.udid,\n      deviceName: props.device.name,\n    });\n  }\n\n  if (props.shouldStartBundler) {\n    Log.nested(`\\nLogs for your project will appear below. ${chalk.dim(`Press Ctrl+C to exit.`)}`);\n  }\n}\n\nasync function getBundleIdentifierForBinaryAsync(binaryPath: string): Promise<string> {\n  const builtInfoPlistPath = path.join(binaryPath, 'Info.plist');\n  const { CFBundleIdentifier } = await parseBinaryPlistAsync(builtInfoPlistPath);\n  return CFBundleIdentifier;\n}\n\nasync function openInSimulatorAsync({\n  projectRoot,\n  bundleIdentifier,\n  device,\n  shouldStartBundler,\n}: {\n  projectRoot: string;\n  bundleIdentifier: string;\n  device: XcodeBuild.BuildProps['device'];\n  shouldStartBundler?: boolean;\n}) {\n  ExpoLogFormatter.logPrettyItem(\n    `${chalk.bold`Opening`} on ${device.name} ${chalk.dim(`(${bundleIdentifier})`)}`\n  );\n\n  if (shouldStartBundler) {\n    await Simulator.streamLogsAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n  }\n\n  const schemes = await getSchemesForIosAsync(projectRoot);\n\n  if (\n    // If the dev-menu is installed, then deep link directly into the app so the user never sees the switcher screen.\n    isDevMenuInstalled(projectRoot) &&\n    // Ensure the app can handle custom URI schemes before attempting to deep link.\n    // This can happen when someone manually removes all URI schemes from the native app.\n    schemes.length\n  ) {\n    // TODO: set to ensure TerminalUI uses this same scheme.\n    const scheme = schemes[0];\n\n    Log.debug(`Deep linking into simulator: ${device.udid}, using scheme: ${scheme}`);\n\n    const result = await Simulator.openProjectAsync({\n      projectRoot,\n      udid: device.udid,\n      devClient: true,\n      scheme,\n      // We always setup native logs before launching to ensure we catch any fatal errors.\n      skipNativeLogs: true,\n    });\n    if (!result.success) {\n      // TODO: Maybe fallback on using the bundle identifier.\n      throw new CommandError(result.error);\n    }\n  } else {\n    Log.debug('Opening app in simulator via bundle identifier: ' + device.udid);\n    const result = await SimControl.openBundleIdAsync({\n      udid: device.udid,\n      bundleIdentifier,\n    });\n    if (result.status === 0) {\n      await Simulator.activateSimulatorWindowAsync();\n    } else {\n      throw new CommandError(\n        `Failed to launch the app on simulator ${device.name} (${device.udid}). Error in \"osascript\" command: ${result.stderr}`\n      );\n    }\n  }\n}\n"],"file":"runIos.js"}