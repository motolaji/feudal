{"version":3,"sources":["../../../../src/commands/run/ios/ExpoLogFormatter.ts"],"names":["ERROR","cachedPackages","packageJsonForPath","filePath","packageJson","findUp","sync","cwd","require","moduleNameFromPath","modulePath","startsWith","org","packageName","split","join","getNodeModuleName","CustomParser","Parser","constructor","formatter","parse","text","results","checkMetroError","isCollectingMetroError","metroError","formatMetroAssetCollectionError","length","match","trim","push","ExpoLogFormatter","Formatter","logPrettyItem","message","Log","log","chalk","whiteBright","props","nativeProjectRoot","path","projectRoot","parser","errorContents","red","errors","shouldShowCompileWarning","lineNumber","columnNumber","isDebug","getFileOperationTitle","type","formatFileOperation","title","moduleNameTag","getPkgName","target","format","formatBreadCrumb","fileName","project","filter","Boolean","formatPhaseScriptExecution","scriptName","moduleName","appName","knownPackages","pkg","packageJsonForProject","name","cyan","Object","values","podfile","finish","warnings","YogaKit","FlipperKit","Flipper"],"mappings":"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","sourcesContent":["import { FileOperation, Formatter, Parser, switchRegex } from '@expo/xcpretty';\nimport chalk from 'chalk';\nimport findUp from 'find-up';\nimport path from 'path';\n\nimport Log from '../../../log';\n\nconst ERROR = '‚ùå ';\n\nconst cachedPackages: Record<string, any> = {};\n\nfunction packageJsonForPath(filePath: string): any {\n  const packageJson = findUp.sync('package.json', { cwd: filePath });\n  if (packageJson) {\n    return require(packageJson);\n  }\n  return null;\n}\n\nfunction moduleNameFromPath(modulePath: string) {\n  if (modulePath.startsWith('@')) {\n    const [org, packageName] = modulePath.split('/');\n    if (org && packageName) {\n      return [org, packageName].join('/');\n    }\n    return modulePath;\n  }\n  const [packageName] = modulePath.split('/');\n  return packageName ? packageName : modulePath;\n}\n\nfunction getNodeModuleName(filePath: string): string | null {\n  // '/Users/evanbacon/Documents/GitHub/lab/yolo5/node_modules/react-native-reanimated/ios/Nodes/REACallFuncNode.m'\n  const [, modulePath] = filePath.split('/node_modules/');\n  if (modulePath) {\n    return moduleNameFromPath(modulePath);\n  }\n  return null;\n}\n\nclass CustomParser extends Parser {\n  private isCollectingMetroError = false;\n  private metroError: string[] = [];\n\n  constructor(public formatter: ExpoLogFormatter) {\n    super(formatter);\n  }\n\n  parse(text: string): void | string {\n    const results = this.checkMetroError(text);\n    if (results) {\n      return results;\n    }\n    return super.parse(text);\n  }\n\n  // Error for the build script wrapper in expo-updates that catches metro bundler errors.\n  // This can be repro'd by importing a file that doesn't exist, then building.\n  // Metro will fail to generate the JS bundle, and throw an error that should be caught here.\n  checkMetroError(text: string) {\n    // In expo-updates, we wrap the bundler script and add regex around the error message so we can present it nicely to the user.\n    return switchRegex(text, [\n      [\n        /@build-script-error-begin/m,\n        () => {\n          this.isCollectingMetroError = true;\n        },\n      ],\n      [\n        /@build-script-error-end/m,\n        () => {\n          const results = this.metroError.join('\\n');\n          // Reset the metro collection error array (should never need this).\n          this.isCollectingMetroError = false;\n          this.metroError = [];\n          return this.formatter.formatMetroAssetCollectionError(results);\n        },\n      ],\n      [\n        null,\n        () => {\n          // Collect all the lines in the metro build error\n          if (this.isCollectingMetroError) {\n            let results = text;\n            if (!this.metroError.length) {\n              const match = text.match(\n                /Error loading assets JSON from Metro.*steps correctly.((.|\\n)*)/m\n              );\n              if (match && match[1]) {\n                results = match[1].trim();\n              }\n            }\n            this.metroError.push(results);\n          }\n        },\n      ],\n    ]);\n  }\n}\n\ntype CustomProps = {\n  projectRoot: string;\n  podfile: Record<string, Record<string, string>>;\n  appName: string;\n};\n\nexport class ExpoLogFormatter extends Formatter {\n  static logPrettyItem(message: string) {\n    Log.log(`${chalk.whiteBright`\\u203A`} ${message}`);\n  }\n\n  private nativeProjectRoot: string;\n\n  constructor(public props: CustomProps) {\n    super(props);\n    this.nativeProjectRoot = path.join(props.projectRoot, 'ios');\n    this.parser = new CustomParser(this);\n  }\n\n  formatMetroAssetCollectionError(errorContents: string): string {\n    const results = `\\n${chalk.red(\n      ERROR +\n        // Provide proper attribution.\n        'Metro encountered an error:\\n' +\n        errorContents\n    )}\\n`;\n    this.errors.push(results);\n    return results;\n  }\n\n  shouldShowCompileWarning(filePath: string, lineNumber?: string, columnNumber?: string): boolean {\n    if (Log.isDebug) {\n      return true;\n    }\n    return !filePath.match(/node_modules/) && !filePath.match(/\\/ios\\/Pods\\//);\n  }\n\n  getFileOperationTitle(type: FileOperation['type']): string {\n    switch (type) {\n      case 'Analyze':\n        return 'Analyzing';\n      case 'GenerateDSYMFile':\n        return `Generating debug`;\n      case 'Ld':\n        return 'Linking  ';\n      case 'Libtool':\n        return 'Packaging';\n      case 'ProcessPCH':\n        return 'Precompiling';\n      case 'ProcessInfoPlistFile':\n        return 'Preparing';\n      case 'CodeSign':\n        return 'Signing  ';\n      case 'Touch':\n        return 'Creating ';\n      case 'CompileC':\n      case 'CompileSwift':\n      case 'CompileXIB':\n      case 'CompileStoryboard':\n        return 'Compiling';\n      default:\n        // Unknown file operation\n        return '';\n    }\n  }\n\n  formatFileOperation(props: FileOperation): string {\n    const title = this.getFileOperationTitle(props.type);\n    const moduleNameTag = this.getPkgName(props.filePath, props.target);\n    return Formatter.format(\n      title,\n      [moduleNameTag, Formatter.formatBreadCrumb(props.fileName, props.target, props.project)]\n        .filter(Boolean)\n        .join(' ')\n    );\n  }\n\n  formatPhaseScriptExecution(scriptName: string, target?: string, project?: string): string {\n    const moduleNameTag = this.getPkgName('', target);\n\n    return Formatter.format(\n      'Executing',\n      [moduleNameTag, Formatter.formatBreadCrumb(scriptName, target, project)]\n        .filter(Boolean)\n        .join(' ')\n    );\n  }\n\n  private getPkgName(filePath: string, target?: string): string | null {\n    let moduleName = getNodeModuleName(filePath);\n    if (!moduleName) {\n      if (target === this.props.appName || target === `Pods-${this.props.appName}`) {\n        moduleName = '';\n      } else if (target && target in knownPackages) {\n        moduleName = knownPackages[target];\n      } else {\n        const pkg = this.packageJsonForProject(target);\n        if (pkg) {\n          moduleName = pkg.name;\n        }\n      }\n    }\n    return moduleName ? chalk.cyan(`${moduleName}`) : null;\n  }\n\n  private packageJsonForProject(project?: string): any {\n    if (!project) {\n      return null;\n    }\n\n    if (project in cachedPackages) {\n      return cachedPackages[project];\n    }\n\n    const filePath = Object.values(this.props.podfile[project] || {})[0] ?? null;\n    if (!filePath) {\n      return null;\n    }\n\n    const pkg = packageJsonForPath(path.join(this.nativeProjectRoot, filePath as string));\n    if (pkg) {\n      cachedPackages[project] = pkg;\n    }\n    return pkg ?? null;\n  }\n\n  finish() {\n    Log.log(`\\n\\u203A ${this.errors.length} error(s), and ${this.warnings.length} warning(s)\\n`);\n  }\n}\n\n// A list of packages that aren't linked through cocoapods directly.\nconst knownPackages: Record<string, string> = {\n  // Added to ReactCore as a `resource_bundle`\n  'React-Core-AccessibilityResources': 'react-native',\n  YogaKit: 'react-native',\n  // flipper\n  'Flipper-DoubleConversion': 'react-native',\n  'Flipper-Folly': 'react-native',\n  'OpenSSL-Universal': 'react-native',\n  FlipperKit: 'react-native',\n  Flipper: 'react-native',\n  'Flipper-RSocket': 'react-native',\n};\n"],"file":"ExpoLogFormatter.js"}