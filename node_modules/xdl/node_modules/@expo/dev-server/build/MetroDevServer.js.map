{"version":3,"file":"MetroDevServer.js","sourceRoot":"","sources":["../src/MetroDevServer.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AACA,oEAAsD;AACtD,2EAGgD;AAChD,8DAAqC;AAKrC,gEAAuC;AACvC,6BAAwC;AAExC,mDAAuF;AACvF,gEAAwC;AACxC,6FAAqE;AACrE,2GAAmF;AA2B5E,KAAK,UAAU,sBAAsB,CAC1C,WAAmB,EACnB,OAA8B;IAM9B,MAAM,KAAK,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;IAElD,MAAM,QAAQ,GAAG,IAAI,qBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAEjD,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IAE3F,MAAM,EAAE,UAAU,EAAE,cAAc,EAAE,GAAG,0CAAyB,CAAC;QAC/D,IAAI,EAAE,WAAW,CAAC,MAAM,CAAC,IAAI;QAC7B,YAAY,EAAE,WAAW,CAAC,YAAY;KACvC,CAAC,CAAC;IAEH,6GAA6G;IAC7G,wCAAwC;IACxC,qBAAqB,CACnB,UAA2B,EAC3B,0CAAyB,EACzB,uCAAuC,CACxC,CAAC;IACF,UAAU,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAE7C,UAAU,CAAC,GAAG,CAAC,qBAAU,CAAC,IAAI,EAAE,CAAC,CAAC;IAClC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,8BAAoB,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9D,UAAU,CAAC,GAAG,CAAC,YAAY,EAAE,qCAA2B,EAAE,CAAC,CAAC;IAE5D,MAAM,uBAAuB,GAAG,WAAW,CAAC,MAAM,CAAC,iBAAiB,CAAC;IACrE,0CAA0C;IAC1C,WAAW,CAAC,MAAM,CAAC,iBAAiB,GAAG,CAAC,eAAoB,EAAE,MAAoB,EAAE,EAAE;QACpF,IAAI,uBAAuB,EAAE;YAC3B,eAAe,GAAG,uBAAuB,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC;SACpE;QACD,OAAO,UAAU,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;IACzC,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,MAAM,KAAK,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC,CAAC;IAEhF,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,cAAc,CAAC,cAAc,CAAC,CAAC;IACvE,QAAQ,CAAC,WAAW,GAAG,YAAY,CAAC,WAAW,CAAC;IAEhD,OAAO;QACL,MAAM,EAAE,cAAc;QACtB,UAAU;QACV,aAAa;KACd,CAAC;AACJ,CAAC;AAnDD,wDAmDC;AAED,IAAI,WAAW,GAAG,CAAC,CAAC;AAEpB,iCAAiC;AAC1B,KAAK,UAAU,WAAW,CAC/B,WAAmB,EACnB,OAA8B,EAC9B,OAAwB;IAExB,MAAM,KAAK,GAAG,sBAAsB,CAAC,WAAW,CAAC,CAAC;IAClD,MAAM,MAAM,GAAG,4BAA4B,CAAC,WAAW,CAAC,CAAC;IAEzD,MAAM,QAAQ,GAAG,IAAI,qBAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACjD,MAAM,MAAM,GAAG,MAAM,eAAe,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,CAAC,CAAC;IACtF,MAAM,OAAO,GAAG,UAAU,WAAW,EAAE,EAAE,CAAC;IAE1C,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE;QAC/C,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IAEH,MAAM,UAAU,GAAG,KAAK,EAAE,MAAqB,EAAyB,EAAE;;QACxE,MAAM,aAAa,GAAwB;YACzC,GAAG,MAAM,CAAC,sBAAsB;YAChC,UAAU,EAAE,QAAQ;YACpB,QAAQ,EAAE,MAAM,CAAC,QAAQ;YACzB,SAAS,EAAE,MAAM,CAAC,UAAU;YAC5B,GAAG,EAAE,MAAA,MAAM,CAAC,GAAG,mCAAI,KAAK;YACxB,MAAM,EAAE,MAAA,MAAM,CAAC,MAAM,mCAAI,CAAC,MAAM,CAAC,GAAG;YACpC,eAAe,EAAE,KAAK;YACtB,YAAY,EAAE,MAAM,CAAC,YAAY;YACjC,qBAAqB,EAAE,MAAM,CAAC,UAAU,CAAC,qBAAqB;YAC9D,UAAU,EAAE,CAAC,oBAA4B,EAAE,cAAsB,EAAE,EAAE;gBACnE,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;oBAClB,QAAQ,CAAC,MAAM,CAAC;wBACd,OAAO;wBACP,IAAI,EAAE,6BAA6B;wBACnC,oBAAoB;wBACpB,cAAc;qBACf,CAAC,CAAC;iBACJ;YACH,CAAC;SACF,CAAC;QACF,QAAQ,CAAC,MAAM,CAAC;YACd,OAAO;YACP,IAAI,EAAE,sBAAsB;YAC5B,aAAa,EAAE;gBACb,UAAU,EAAE,aAAa,CAAC,UAAU;gBACpC,QAAQ,EAAE,MAAM,CAAC,QAAQ;gBACzB,SAAS,EAAE,MAAM,CAAC,UAAU;gBAC5B,GAAG,EAAE,MAAA,MAAM,CAAC,GAAG,mCAAI,KAAK;gBACxB,MAAM,EAAE,MAAA,MAAM,CAAC,MAAM,mCAAI,KAAK;aAC/B;SACF,CAAC,CAAC;QACH,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,WAAW,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;QAC7D,MAAM,MAAM,GAAG,CAAC,MAAM,WAAW,CAAC,SAAS,CACzC,aAAa,CACd,CAAyC,CAAC;QAC3C,QAAQ,CAAC,MAAM,CAAC;YACd,OAAO;YACP,IAAI,EAAE,mBAAmB;SAC1B,CAAC,CAAC;QACH,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;IAC/B,CAAC,CAAC;IAEF,IAAI;QACF,OAAO,MAAM,OAAO,CAAC,GAAG,CACtB,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,MAAqB,EAAE,EAAE;YAC1C,MAAM,YAAY,GAAG,MAAM,UAAU,CAAC,MAAM,CAAC,CAAC;YAC9C,MAAM,uBAAuB,GAAG,MAAM,4CAA4B,CAChE,WAAW,EACX,MAAM,CAAC,QAAQ,CAChB,CAAC;YAEF,IAAI,uBAAuB,EAAE;gBAC3B,OAAO,CAAC,MAAM,CAAC,IAAI,CACjB,EAAE,GAAG,EAAE,MAAM,EAAE,EACf,yDAAyD,MAAM,CAAC,QAAQ,GAAG,CAC5E,CAAC;gBACF,MAAM,kBAAkB,GAAG,MAAM,sCAAsB,CACrD,WAAW,EACX,YAAY,CAAC,IAAI,EACjB,YAAY,CAAC,GAAG,EAChB,MAAM,CAAC,MAAM,CACd,CAAC;gBACF,YAAY,CAAC,oBAAoB,GAAG,kBAAkB,CAAC,GAAG,CAAC;gBAC3D,YAAY,CAAC,eAAe,GAAG,kBAAkB,CAAC,SAAS,CAAC;aAC7D;YAED,OAAO,YAAY,CAAC;QACtB,CAAC,CAAC,CACH,CAAC;KACH;YAAS;QACR,WAAW,CAAC,GAAG,EAAE,CAAC;KACnB;AACH,CAAC;AA1FD,kCA0FC;AAED,SAAS,sBAAsB,CAAC,WAAmB;IACjD,MAAM,YAAY,GAAG,sBAAW,CAAC,MAAM,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IAC9D,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,IAAI,KAAK,CACb,4CAA4C;YAC1C,WAAW;YACX,IAAI;YACJ,sDAAsD;YACtD,yEAAyE;YACzE,kCAAkC,CACrC,CAAC;KACH;IACD,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,4BAA4B,CAAC,WAAmB;IACvD,MAAM,YAAY,GAAG,sBAAW,CAAC,MAAM,CAAC,WAAW,EAAE,kBAAkB,CAAC,CAAC;IACzE,IAAI,CAAC,YAAY,EAAE;QACjB,MAAM,IAAI,KAAK,CACb,oDAAoD;YAClD,oDAAoD;YACpD,yEAAyE;YACzE,kCAAkC,CACrC,CAAC;KACH;IACD,OAAO,OAAO,CAAC,YAAY,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,qBAAqB,CAC5B,GAAkB,EAClB,gBAAgC,EAChC,gBAAgC;IAEhC,MAAM,IAAI,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,KAAK,gBAAgB,CAAC,CAAC;IAClF,IAAI,IAAI,EAAE;QACR,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC;KAChC;AACH,CAAC;AAED,yEAAyE;AACzE,qDAAqD;AACrD,SAAS,uCAAuC,CAC9C,GAAoB,EACpB,GAAmB,EACnB,IAA2B;IAE3B,kCAAkC;IAClC,IACE,OAAO,GAAG,CAAC,OAAO,CAAC,MAAM,KAAK,QAAQ;QACtC,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC;QACnD,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,mDAAmD,CAAC,EAC9E;QACA,IAAI,CACF,IAAI,KAAK,CACP,6BAA6B,GAAG,CAAC,OAAO,CAAC,MAAM,IAAI;YACjD,yFAAyF;YACzF,sEAAsE,CACzE,CACF,CAAC;QACF,OAAO;KACR;IAED,4BAA4B;IAC5B,GAAG,CAAC,SAAS,CAAC,wBAAwB,EAAE,SAAS,CAAC,CAAC;IAEnD,IAAI,EAAE,CAAC;AACT,CAAC;AAED,qFAAqF;AACrF,2DAA2D;AAC3D,kDAAkD;AAClD,SAAS,4BAA4B,CACnC,GAAoB,EACpB,GAAmB,EACnB,IAA2B;;IAE3B,IAAI,GAAG,CAAC,GAAG,EAAE;QACX,MAAM,GAAG,GAAG,WAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QAC9B,MAAM,MAAM,GAAG,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC;QAClC,MAAM,aAAa,GACjB,MAAM;YACN,CAAC,qBAAqB,EAAE,8CAA8C,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;QAC3F,IAAI,CAAA,MAAA,GAAG,CAAC,QAAQ,0CAAE,QAAQ,CAAC,MAAM,CAAC,KAAI,MAAM,IAAI,aAAa,EAAE;YAC7D,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,MAAM,CAAC,CAAC;YAErD,6DAA6D;YAC7D,MAAM,SAAS,GAAG,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAC1C,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,EAAE,GAAG,IAAI,EAAE,EAAE;gBAC/B,IAAI,GAAG,KAAK,6BAA6B,EAAE;oBACzC,OAAO;iBACR;gBACD,SAAS,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC;YAC1B,CAAC,CAAC;SACH;KACF;IACD,IAAI,EAAE,CAAC;AACT,CAAC","sourcesContent":["import Log from '@expo/bunyan';\nimport * as ExpoMetroConfig from '@expo/metro-config';\nimport {\n  createDevServerMiddleware,\n  securityHeadersMiddleware,\n} from '@react-native-community/cli-server-api';\nimport bodyParser from 'body-parser';\nimport type { Server as ConnectServer, HandleFunction } from 'connect';\nimport http from 'http';\nimport type { IncomingMessage, ServerResponse } from 'http';\nimport type Metro from 'metro';\nimport resolveFrom from 'resolve-from';\nimport { parse as parseUrl } from 'url';\n\nimport { buildHermesBundleAsync, shouldBuildHermesBundleAsync } from './HermesBundler';\nimport LogReporter from './LogReporter';\nimport clientLogsMiddleware from './middleware/clientLogsMiddleware';\nimport createJsInspectorMiddleware from './middleware/createJsInspectorMiddleware';\n\nexport type MetroDevServerOptions = ExpoMetroConfig.LoadOptions & {\n  logger: Log;\n  quiet?: boolean;\n};\nexport type BundleOptions = {\n  entryPoint: string;\n  platform: 'android' | 'ios' | 'web';\n  dev?: boolean;\n  minify?: boolean;\n  sourceMapUrl?: string;\n};\nexport type BundleAssetWithFileHashes = Metro.AssetData & {\n  fileHashes: string[]; // added by the hashAssets asset plugin\n};\nexport type BundleOutput = {\n  code: string;\n  map: string;\n  hermesBytecodeBundle?: Uint8Array;\n  hermesSourcemap?: string;\n  assets: readonly BundleAssetWithFileHashes[];\n};\nexport type MessageSocket = {\n  broadcast: (method: string, params?: Record<string, any> | undefined) => void;\n};\n\nexport async function runMetroDevServerAsync(\n  projectRoot: string,\n  options: MetroDevServerOptions\n): Promise<{\n  server: http.Server;\n  middleware: any;\n  messageSocket: MessageSocket;\n}> {\n  const Metro = importMetroFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n\n  const metroConfig = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n\n  const { middleware, attachToServer } = createDevServerMiddleware({\n    port: metroConfig.server.port,\n    watchFolders: metroConfig.watchFolders,\n  });\n\n  // securityHeadersMiddleware does not support cross-origin requests for remote devtools to get the sourcemap.\n  // We replace with the enhanced version.\n  replaceMiddlewareWith(\n    middleware as ConnectServer,\n    securityHeadersMiddleware,\n    remoteDevtoolsSecurityHeadersMiddleware\n  );\n  middleware.use(remoteDevtoolsCorsMiddleware);\n\n  middleware.use(bodyParser.json());\n  middleware.use('/logs', clientLogsMiddleware(options.logger));\n  middleware.use('/inspector', createJsInspectorMiddleware());\n\n  const customEnhanceMiddleware = metroConfig.server.enhanceMiddleware;\n  // @ts-ignore can't mutate readonly config\n  metroConfig.server.enhanceMiddleware = (metroMiddleware: any, server: Metro.Server) => {\n    if (customEnhanceMiddleware) {\n      metroMiddleware = customEnhanceMiddleware(metroMiddleware, server);\n    }\n    return middleware.use(metroMiddleware);\n  };\n\n  const serverInstance = await Metro.runServer(metroConfig, { hmrEnabled: true });\n\n  const { messageSocket, eventsSocket } = attachToServer(serverInstance);\n  reporter.reportEvent = eventsSocket.reportEvent;\n\n  return {\n    server: serverInstance,\n    middleware,\n    messageSocket,\n  };\n}\n\nlet nextBuildID = 0;\n\n// TODO: deprecate options.target\nexport async function bundleAsync(\n  projectRoot: string,\n  options: MetroDevServerOptions,\n  bundles: BundleOptions[]\n): Promise<BundleOutput[]> {\n  const metro = importMetroFromProject(projectRoot);\n  const Server = importMetroServerFromProject(projectRoot);\n\n  const reporter = new LogReporter(options.logger);\n  const config = await ExpoMetroConfig.loadAsync(projectRoot, { reporter, ...options });\n  const buildID = `bundle_${nextBuildID++}`;\n\n  const metroServer = await metro.runMetro(config, {\n    watch: false,\n  });\n\n  const buildAsync = async (bundle: BundleOptions): Promise<BundleOutput> => {\n    const bundleOptions: Metro.BundleOptions = {\n      ...Server.DEFAULT_BUNDLE_OPTIONS,\n      bundleType: 'bundle',\n      platform: bundle.platform,\n      entryFile: bundle.entryPoint,\n      dev: bundle.dev ?? false,\n      minify: bundle.minify ?? !bundle.dev,\n      inlineSourceMap: false,\n      sourceMapUrl: bundle.sourceMapUrl,\n      createModuleIdFactory: config.serializer.createModuleIdFactory,\n      onProgress: (transformedFileCount: number, totalFileCount: number) => {\n        if (!options.quiet) {\n          reporter.update({\n            buildID,\n            type: 'bundle_transform_progressed',\n            transformedFileCount,\n            totalFileCount,\n          });\n        }\n      },\n    };\n    reporter.update({\n      buildID,\n      type: 'bundle_build_started',\n      bundleDetails: {\n        bundleType: bundleOptions.bundleType,\n        platform: bundle.platform,\n        entryFile: bundle.entryPoint,\n        dev: bundle.dev ?? false,\n        minify: bundle.minify ?? false,\n      },\n    });\n    const { code, map } = await metroServer.build(bundleOptions);\n    const assets = (await metroServer.getAssets(\n      bundleOptions\n    )) as readonly BundleAssetWithFileHashes[];\n    reporter.update({\n      buildID,\n      type: 'bundle_build_done',\n    });\n    return { code, map, assets };\n  };\n\n  try {\n    return await Promise.all(\n      bundles.map(async (bundle: BundleOptions) => {\n        const bundleOutput = await buildAsync(bundle);\n        const shouldBuildHermesBundle = await shouldBuildHermesBundleAsync(\n          projectRoot,\n          bundle.platform\n        );\n\n        if (shouldBuildHermesBundle) {\n          options.logger.info(\n            { tag: 'expo' },\n            `💿 Building Hermes bytecode for the bundle - platform[${bundle.platform}]`\n          );\n          const hermesBundleOutput = await buildHermesBundleAsync(\n            projectRoot,\n            bundleOutput.code,\n            bundleOutput.map,\n            bundle.minify\n          );\n          bundleOutput.hermesBytecodeBundle = hermesBundleOutput.hbc;\n          bundleOutput.hermesSourcemap = hermesBundleOutput.sourcemap;\n        }\n\n        return bundleOutput;\n      })\n    );\n  } finally {\n    metroServer.end();\n  }\n}\n\nfunction importMetroFromProject(projectRoot: string): typeof Metro {\n  const resolvedPath = resolveFrom.silent(projectRoot, 'metro');\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing package \"metro\" in the project at ' +\n        projectRoot +\n        '. ' +\n        'This usually means `react-native` is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n\nfunction importMetroServerFromProject(projectRoot: string): typeof Metro.Server {\n  const resolvedPath = resolveFrom.silent(projectRoot, 'metro/src/Server');\n  if (!resolvedPath) {\n    throw new Error(\n      'Missing module \"metro/src/Server\" in the project. ' +\n        'This usually means React Native is not installed. ' +\n        'Please verify that dependencies in package.json include \"react-native\" ' +\n        'and run `yarn` or `npm install`.'\n    );\n  }\n  return require(resolvedPath);\n}\n\nfunction replaceMiddlewareWith(\n  app: ConnectServer,\n  sourceMiddleware: HandleFunction,\n  targetMiddleware: HandleFunction\n) {\n  const item = app.stack.find(middleware => middleware.handle === sourceMiddleware);\n  if (item) {\n    item.handle = targetMiddleware;\n  }\n}\n\n// Like securityHeadersMiddleware but further allow cross-origin requests\n// from https://chrome-devtools-frontend.appspot.com/\nfunction remoteDevtoolsSecurityHeadersMiddleware(\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: (err?: Error) => void\n) {\n  // Block any cross origin request.\n  if (\n    typeof req.headers.origin === 'string' &&\n    !req.headers.origin.match(/^https?:\\/\\/localhost:/) &&\n    !req.headers.origin.match(/^https:\\/\\/chrome-devtools-frontend\\.appspot\\.com/)\n  ) {\n    next(\n      new Error(\n        `Unauthorized request from ${req.headers.origin}. ` +\n          'This may happen because of a conflicting browser extension to intercept HTTP requests. ' +\n          'Please try again without browser extensions or using incognito mode.'\n      )\n    );\n    return;\n  }\n\n  // Block MIME-type sniffing.\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n\n  next();\n}\n\n// Middleware that accepts multiple Access-Control-Allow-Origin for processing *.map.\n// This is a hook middleware before metro processing *.map,\n// which originally allow only devtools://devtools\nfunction remoteDevtoolsCorsMiddleware(\n  req: IncomingMessage,\n  res: ServerResponse,\n  next: (err?: Error) => void\n) {\n  if (req.url) {\n    const url = parseUrl(req.url);\n    const origin = req.headers.origin;\n    const isValidOrigin =\n      origin &&\n      ['devtools://devtools', 'https://chrome-devtools-frontend.appspot.com'].includes(origin);\n    if (url.pathname?.endsWith('.map') && origin && isValidOrigin) {\n      res.setHeader('Access-Control-Allow-Origin', origin);\n\n      // Prevent metro overwrite Access-Control-Allow-Origin header\n      const setHeader = res.setHeader.bind(res);\n      res.setHeader = (key, ...args) => {\n        if (key === 'Access-Control-Allow-Origin') {\n          return;\n        }\n        setHeader(key, ...args);\n      };\n    }\n  }\n  next();\n}\n"]}