"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openAppStore = exports.getXcodeVersion = exports.appStoreId = exports.minimumVersion = void 0;
const child_process_1 = require("child_process");
const internal_1 = require("./internal");
// Based on the RN docs (Aug 2020).
exports.minimumVersion = 9.4;
exports.appStoreId = '497799835';
let _xcodeVersion = false;
function getXcodeVersion() {
    var _a;
    // This method anywhere from 1-2s so cache the results in case we run it multiple times
    // (like in run:ios or reopening on iOS for dev client).
    if (_xcodeVersion !== false) {
        return _xcodeVersion;
    }
    try {
        const last = (_a = child_process_1.execSync('xcodebuild -version', { stdio: 'pipe' })
            .toString()
            .match(/^Xcode (\d+\.\d+)/)) === null || _a === void 0 ? void 0 : _a[1];
        // Convert to a semver string
        if (last) {
            _xcodeVersion = `${last}.0`;
            return _xcodeVersion;
        }
        // not sure what's going on
        internal_1.Logger.global.error('Unable to check Xcode version. Command ran successfully but no version number was found.');
    }
    catch {
        // not installed
    }
    _xcodeVersion = null;
    return _xcodeVersion;
}
exports.getXcodeVersion = getXcodeVersion;
/**
 * Open a link to the App Store. Just link in mobile apps, **never** redirect without prompting first.
 *
 * @param appId
 */
function openAppStore(appId) {
    const link = getAppStoreLink(appId);
    child_process_1.execSync(`open ${link}`, { stdio: 'ignore' });
}
exports.openAppStore = openAppStore;
function getAppStoreLink(appId) {
    if (process.platform === 'darwin') {
        // TODO: Is there ever a case where the macappstore isn't available on mac?
        return `macappstore://itunes.apple.com/app/id${appId}`;
    }
    return `https://apps.apple.com/us/app/id${appId}`;
}
//# sourceMappingURL=Xcode.js.map