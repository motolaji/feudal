{"version":3,"file":"UserSettings.js","sourceRoot":"","sources":["../src/UserSettings.ts"],"names":[],"mappings":";;;;;AAAA,gEAAuC;AACvC,wDAA0B;AAC1B,4CAAoB;AACpB,gDAAwB;AACxB,gDAAwB;AAExB,yCAAiD;AAuBjD,MAAM,kBAAkB,GAAG,YAAY,CAAC;AAExC,SAAS,gBAAgB;IACvB,OAAO,cAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,EAAE,kBAAkB,CAAC,CAAC;AAC/D,CAAC;AAED,SAAS,oBAAoB;IAC3B,OAAO,IAAI,mBAAQ,CAAmB,gBAAgB,EAAE,EAAE;QACxD,qBAAqB,EAAE,EAAE;QACzB,mBAAmB,EAAE,EAAE;KACxB,CAAC,CAAC;AACL,CAAC;AAED,IAAI,QAAQ,GAAG,KAAK,CAAC;AAErB,SAAS,oBAAoB;IAC3B,IAAI,OAAO,GAAG,OAAO,CAAC,GAAG,CAAC,4BAA4B,CAAC;IACvD,IAAI,CAAC,OAAO,EAAE;QACZ,MAAM,IAAI,GAAG,YAAE,CAAC,OAAO,EAAE,CAAC;QAE1B,IAAI,cAAG,CAAC,SAAS,EAAE,EAAE;YACnB,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;SAC5C;aAAM,IAAI,cAAG,CAAC,OAAO,EAAE,EAAE;YACxB,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;SAC1C;aAAM;YACL,OAAO,GAAG,cAAI,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SACpC;KACF;IACD,IAAI,CAAC,QAAQ,EAAE;QACb,kBAAE,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QACvB,QAAQ,GAAG,IAAI,CAAC;KACjB;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED,6EAA6E;AAC7E,KAAK,UAAU,2BAA2B;IACxC,MAAM,QAAQ,GAAG,MAAM,oBAAoB,EAAE,CAAC;IAC9C,IAAI,EAAE,GAAG,MAAM,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAE/C,IAAI,CAAC,EAAE,EAAE;QACP,EAAE,GAAG,cAAI,CAAC,EAAE,EAAE,CAAC;QACf,MAAM,QAAQ,CAAC,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;KACrC;IAED,OAAO,EAAE,CAAC;AACZ,CAAC;AAED,SAAS,WAAW;IAClB,OAAO,OAAO,CAAC,GAAG,CAAC,UAAU,IAAI,IAAI,CAAC;AACxC,CAAC;AAED,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,oBAAoB,EAAE,EAAE;IACzD,oBAAoB;IACpB,gBAAgB;IAChB,oBAAoB;IACpB,WAAW;IACX,2BAA2B;IAC3B,kBAAkB;CACnB,CAAC,CAAC;AAEH,kBAAe,YAAY,CAAC","sourcesContent":["import JsonFile from '@expo/json-file';\nimport fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport uuid from 'uuid';\n\nimport { ConnectionType, Env } from './internal';\n\nexport type UserSettingsData = {\n  developmentCodeSigningId?: string;\n  appleId?: string;\n  accessToken?: string;\n  auth?: UserData | null;\n  ignoreBundledBinaries?: string[];\n  openDevToolsAtStartup?: boolean;\n  PATH?: string;\n  sendTo?: string;\n  uuid?: string;\n};\n\nexport type UserData = {\n  developmentCodeSigningId?: string;\n  appleId?: string;\n  userId?: string;\n  username?: string;\n  currentConnection?: ConnectionType;\n  sessionSecret?: string;\n};\n\nconst SETTINGS_FILE_NAME = 'state.json';\n\nfunction userSettingsFile(): string {\n  return path.join(dotExpoHomeDirectory(), SETTINGS_FILE_NAME);\n}\n\nfunction userSettingsJsonFile(): JsonFile<UserSettingsData> {\n  return new JsonFile<UserSettingsData>(userSettingsFile(), {\n    jsonParseErrorDefault: {},\n    cantReadFileDefault: {},\n  });\n}\n\nlet mkdirped = false;\n\nfunction dotExpoHomeDirectory() {\n  let dirPath = process.env.__UNSAFE_EXPO_HOME_DIRECTORY;\n  if (!dirPath) {\n    const home = os.homedir();\n\n    if (Env.isStaging()) {\n      dirPath = path.join(home, '.expo-staging');\n    } else if (Env.isLocal()) {\n      dirPath = path.join(home, '.expo-local');\n    } else {\n      dirPath = path.join(home, '.expo');\n    }\n  }\n  if (!mkdirped) {\n    fs.mkdirpSync(dirPath);\n    mkdirped = true;\n  }\n  return dirPath;\n}\n\n// returns an anonymous, unique identifier for a user on the current computer\nasync function getAnonymousIdentifierAsync(): Promise<string> {\n  const settings = await userSettingsJsonFile();\n  let id = await settings.getAsync('uuid', null);\n\n  if (!id) {\n    id = uuid.v4();\n    await settings.setAsync('uuid', id);\n  }\n\n  return id;\n}\n\nfunction accessToken(): string | null {\n  return process.env.EXPO_TOKEN || null;\n}\n\nconst UserSettings = Object.assign(userSettingsJsonFile(), {\n  dotExpoHomeDirectory,\n  userSettingsFile,\n  userSettingsJsonFile,\n  accessToken,\n  getAnonymousIdentifierAsync,\n  SETTINGS_FILE_NAME,\n});\n\nexport default UserSettings;\n"]}