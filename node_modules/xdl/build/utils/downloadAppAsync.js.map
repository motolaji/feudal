{"version":3,"file":"downloadAppAsync.js","sourceRoot":"","sources":["../../src/utils/downloadAppAsync.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig, Canceler } from 'axios';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { Extract, UserSettings } from '../internal';\n\nconst TIMER_DURATION = 30000;\nconst TIMEOUT = 3600000;\n\ntype ProgressCallback = (progressPercentage: number) => void;\ntype RetryCallback = (cancel: Canceler) => void;\n\nasync function _downloadAsync(\n  url: string,\n  outputPath: string,\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n) {\n  let promptShown = false;\n  let currentProgress = 0;\n\n  const { cancel, token } = axios.CancelToken.source();\n\n  let warningTimer = setTimeout(() => {\n    if (retryFunction) {\n      retryFunction(cancel);\n    }\n    promptShown = true;\n  }, TIMER_DURATION);\n\n  const tmpPath = `${outputPath}.download`;\n  const config: AxiosRequestConfig = {\n    timeout: TIMEOUT,\n    responseType: 'stream',\n    cancelToken: token,\n  };\n  const response = await axios(url, config);\n  await new Promise<void>(resolve => {\n    const totalDownloadSize = response.data.headers['content-length'];\n    let downloadProgress = 0;\n    response.data\n      .on('data', (chunk: Buffer) => {\n        downloadProgress += chunk.length;\n        const roundedProgress = Math.floor((downloadProgress / totalDownloadSize) * 100);\n        if (currentProgress !== roundedProgress) {\n          currentProgress = roundedProgress;\n          clearTimeout(warningTimer);\n          if (!promptShown) {\n            warningTimer = setTimeout(() => {\n              if (retryFunction) {\n                retryFunction(cancel);\n              }\n              promptShown = true;\n            }, TIMER_DURATION);\n          }\n          if (progressFunction) {\n            progressFunction(roundedProgress);\n          }\n        }\n      })\n      .on('end', () => {\n        clearTimeout(warningTimer);\n        if (progressFunction && currentProgress !== 100) {\n          progressFunction(100);\n        }\n        resolve();\n      })\n      .pipe(fs.createWriteStream(tmpPath));\n  });\n  await fs.rename(tmpPath, outputPath);\n}\n\nexport async function downloadAppAsync(\n  url: string,\n  outputPath: string,\n  { extract = false } = {},\n  progressFunction?: ProgressCallback,\n  retryFunction?: RetryCallback\n): Promise<void> {\n  if (extract) {\n    const dotExpoHomeDirectory = UserSettings.dotExpoHomeDirectory();\n    const tmpPath = path.join(dotExpoHomeDirectory, 'tmp-download-file');\n    await _downloadAsync(url, tmpPath, progressFunction);\n    await Extract.extractAsync(tmpPath, outputPath);\n    fs.removeSync(tmpPath);\n  } else {\n    await _downloadAsync(url, outputPath, progressFunction, retryFunction);\n  }\n}\n"]}