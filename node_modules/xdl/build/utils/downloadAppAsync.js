"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadAppAsync = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const internal_1 = require("../internal");
const TIMER_DURATION = 30000;
const TIMEOUT = 3600000;
async function _downloadAsync(url, outputPath, progressFunction, retryFunction) {
    let promptShown = false;
    let currentProgress = 0;
    const { cancel, token } = axios_1.default.CancelToken.source();
    let warningTimer = setTimeout(() => {
        if (retryFunction) {
            retryFunction(cancel);
        }
        promptShown = true;
    }, TIMER_DURATION);
    const tmpPath = `${outputPath}.download`;
    const config = {
        timeout: TIMEOUT,
        responseType: 'stream',
        cancelToken: token,
    };
    const response = await axios_1.default(url, config);
    await new Promise(resolve => {
        const totalDownloadSize = response.data.headers['content-length'];
        let downloadProgress = 0;
        response.data
            .on('data', (chunk) => {
            downloadProgress += chunk.length;
            const roundedProgress = Math.floor((downloadProgress / totalDownloadSize) * 100);
            if (currentProgress !== roundedProgress) {
                currentProgress = roundedProgress;
                clearTimeout(warningTimer);
                if (!promptShown) {
                    warningTimer = setTimeout(() => {
                        if (retryFunction) {
                            retryFunction(cancel);
                        }
                        promptShown = true;
                    }, TIMER_DURATION);
                }
                if (progressFunction) {
                    progressFunction(roundedProgress);
                }
            }
        })
            .on('end', () => {
            clearTimeout(warningTimer);
            if (progressFunction && currentProgress !== 100) {
                progressFunction(100);
            }
            resolve();
        })
            .pipe(fs_extra_1.default.createWriteStream(tmpPath));
    });
    await fs_extra_1.default.rename(tmpPath, outputPath);
}
async function downloadAppAsync(url, outputPath, { extract = false } = {}, progressFunction, retryFunction) {
    if (extract) {
        const dotExpoHomeDirectory = internal_1.UserSettings.dotExpoHomeDirectory();
        const tmpPath = path_1.default.join(dotExpoHomeDirectory, 'tmp-download-file');
        await _downloadAsync(url, tmpPath, progressFunction);
        await internal_1.Extract.extractAsync(tmpPath, outputPath);
        fs_extra_1.default.removeSync(tmpPath);
    }
    else {
        await _downloadAsync(url, outputPath, progressFunction, retryFunction);
    }
}
exports.downloadAppAsync = downloadAppAsync;
//# sourceMappingURL=downloadAppAsync.js.map