{"version":3,"file":"profileMethod.js","sourceRoot":"","sources":["../../src/utils/profileMethod.ts"],"names":[],"mappings":";;;;;;AAAA,kDAA0B;AAC1B,mCAAiC;AAEjC,MAAM,WAAW,GAAG,gBAAO,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;AAEnD,sCAAsC;AACtC,MAAM,WAAW,GAA6B,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC;AACpF,sCAAsC;AACtC,MAAM,cAAc,GAA6B,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,EAAE,GAAE,CAAC,CAAC;AAE1F;;;;;;GAMG;AACI,MAAM,aAAa,GAAG,CAAqB,EAAqB,EAAE,YAAqB,EAAE,EAAE;IAChG,MAAM,IAAI,GAAG,eAAK,CAAC,GAAG,CAAC,gBAAgB,YAAY,aAAZ,YAAY,cAAZ,YAAY,GAAI,CAAC,EAAE,CAAC,IAAI,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC;IACjF,OAAO,CAAC,GAAG,IAAO,EAAK,EAAE;QACvB,WAAW,CAAC,IAAI,CAAC,CAAC;QAClB,MAAM,OAAO,GAAG,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC;QAC5B,IAAI,OAAO,YAAY,OAAO,EAAE;YAC9B,aAAa;YACb,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACxC,OAAO;qBACJ,IAAI,CAAC,OAAO,CAAC,EAAE;oBACd,OAAO,CAAC,OAAO,CAAC,CAAC;oBACjB,cAAc,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC,CAAC;qBACD,KAAK,CAAC,KAAK,CAAC,EAAE;oBACb,MAAM,CAAC,KAAK,CAAC,CAAC;oBACd,cAAc,CAAC,IAAI,CAAC,CAAC;gBACvB,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,cAAc,CAAC,IAAI,CAAC,CAAC;SACtB;QACD,OAAO,OAAO,CAAC;IACjB,CAAC,CAAC;AACJ,CAAC,CAAC;AAvBW,QAAA,aAAa,iBAuBxB","sourcesContent":["import chalk from 'chalk';\nimport { boolish } from 'getenv';\n\nconst isProfiling = boolish('EXPO_PROFILE', false);\n\n// eslint-disable-next-line no-console\nconst consoleTime: (label?: string) => void = isProfiling ? console.time : () => {};\n// eslint-disable-next-line no-console\nconst consoleTimeEnd: (label?: string) => void = isProfiling ? console.timeEnd : () => {};\n\n/**\n * Wrap a method and profile the time it takes to execute the method using `EXPO_PROFILE`.\n * Works best with named functions (i.e. not arrow functions).\n *\n * @param fn\n * @param functionName\n */\nexport const profileMethod = <T extends any[], U>(fn: (...args: T) => U, functionName?: string) => {\n  const name = chalk.dim(`⏱  [profile] ${functionName ?? (fn.name || 'unknown')}`);\n  return (...args: T): U => {\n    consoleTime(name);\n    const results = fn(...args);\n    if (results instanceof Promise) {\n      // @ts-ignore\n      return new Promise<U>((resolve, reject) => {\n        results\n          .then(results => {\n            resolve(results);\n            consoleTimeEnd(name);\n          })\n          .catch(error => {\n            reject(error);\n            consoleTimeEnd(name);\n          });\n      });\n    } else {\n      consoleTimeEnd(name);\n    }\n    return results;\n  };\n};\n"]}