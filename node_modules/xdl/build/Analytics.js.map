{"version":3,"file":"Analytics.js","sourceRoot":"","sources":["../src/Analytics.ts"],"names":[],"mappings":";;;;;;AAAA,oEAAqC;AACrC,4CAAoB;AAEpB,yCAAgC;AAEhC,MAAM,8BAA8B,GAAmC;IACrE,MAAM,EAAE,KAAK;IACb,KAAK,EAAE,SAAS;IAChB,KAAK,EAAE,OAAO;CACf,CAAC;AAEF,MAAa,eAAe;IAM1B,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,IAAW,OAAO;QAChB,OAAO,IAAI,CAAC,QAAQ,CAAC;IACvB,CAAC;IAEM,KAAK;QACV,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,KAAK,EAAE,CAAC;SAClC;IACH,CAAC;IAEM,gBAAgB,CAAC,MAAc,EAAE,cAAsB;QAC5D,sFAAsF;QACtF,IAAI,CAAC,mBAAmB,GAAG,IAAI,wBAAO,CAAC,MAAM,EAAE,EAAE,aAAa,EAAE,GAAG,EAAE,CAAC,CAAC;QACvE,IAAI,CAAC,QAAQ,GAAG,cAAc,CAAC;IACjC,CAAC;IAEM,YAAY,CAAC,MAAc,EAAE,MAAW;QAC7C,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;QAEzB,IAAI,IAAI,CAAC,mBAAmB,EAAE;YAC5B,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC;gBAChC,MAAM,EAAE,IAAI,CAAC,OAAO;gBACpB,MAAM,EAAE,IAAI,CAAC,UAAU;gBACvB,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;aAC3B,CAAC,CAAC;SACJ;IACH,CAAC;IAEM,QAAQ,CAAC,IAAY,EAAE,aAAkB,EAAE;QAChD,IAAI,IAAI,CAAC,mBAAmB,IAAI,IAAI,CAAC,OAAO,EAAE;YAC5C,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC;gBAC7B,MAAM,EAAE,IAAI,CAAC,OAAO;gBACpB,KAAK,EAAE,IAAI;gBACX,UAAU;gBACV,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE;aAC3B,CAAC,CAAC;SACJ;IACH,CAAC;IAEO,UAAU;QAChB,MAAM,QAAQ,GAAG,8BAA8B,CAAC,YAAE,CAAC,QAAQ,EAAE,CAAC,IAAI,YAAE,CAAC,QAAQ,EAAE,CAAC;QAChF,MAAM,OAAO,GAAG;YACd,EAAE,EAAE,aAAE,CAAC,OAAO,EAAE;YAChB,MAAM,EAAE;gBACN,KAAK,EAAE,QAAQ;gBACf,KAAK,EAAE,QAAQ;aAChB;YACD,EAAE,EAAE;gBACF,IAAI,EAAE,QAAQ;gBACd,OAAO,EAAE,YAAE,CAAC,OAAO,EAAE;aACtB;YACD,GAAG,EAAE,EAAE;SACR,CAAC;QAEF,IAAI,IAAI,CAAC,QAAQ,EAAE;YACjB,OAAO,CAAC,GAAG,GAAG;gBACZ,OAAO,EAAE,IAAI,CAAC,QAAQ;aACvB,CAAC;SACH;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;CACF;AAzED,0CAyEC;AAED,MAAM,aAAa,GAAG,IAAI,eAAe,EAAE,CAAC;AAE5C,kBAAe,aAAa,CAAC","sourcesContent":["import Segment from 'analytics-node';\nimport os from 'os';\n\nimport { ip } from './internal';\n\nconst PLATFORM_TO_ANALYTICS_PLATFORM: { [platform: string]: string } = {\n  darwin: 'Mac',\n  win32: 'Windows',\n  linux: 'Linux',\n};\n\nexport class AnalyticsClient {\n  private userTraits: any;\n  private segmentNodeInstance: Segment | undefined;\n  private _userId: string | undefined;\n  private _version: string | undefined;\n\n  public get userId() {\n    return this._userId;\n  }\n\n  public get version() {\n    return this._version;\n  }\n\n  public flush() {\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.flush();\n    }\n  }\n\n  public initializeClient(apiKey: string, packageVersion: string) {\n    // Do not wait before flushing, we want node to close immediately if the programs ends\n    this.segmentNodeInstance = new Segment(apiKey, { flushInterval: 300 });\n    this._version = packageVersion;\n  }\n\n  public identifyUser(userId: string, traits: any) {\n    this._userId = userId;\n    this.userTraits = traits;\n\n    if (this.segmentNodeInstance) {\n      this.segmentNodeInstance.identify({\n        userId: this._userId,\n        traits: this.userTraits,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  public logEvent(name: string, properties: any = {}) {\n    if (this.segmentNodeInstance && this._userId) {\n      this.segmentNodeInstance.track({\n        userId: this._userId,\n        event: name,\n        properties,\n        context: this.getContext(),\n      });\n    }\n  }\n\n  private getContext() {\n    const platform = PLATFORM_TO_ANALYTICS_PLATFORM[os.platform()] || os.platform();\n    const context = {\n      ip: ip.address(),\n      device: {\n        model: platform,\n        brand: platform,\n      },\n      os: {\n        name: platform,\n        version: os.release(),\n      },\n      app: {},\n    };\n\n    if (this._version) {\n      context.app = {\n        version: this._version,\n      };\n    }\n\n    return context;\n  }\n}\n\nconst defaultClient = new AnalyticsClient();\n\nexport default defaultClient;\n"]}