{"version":3,"file":"startDevServerAsync.js","sourceRoot":"","sources":["../../src/start/startDevServerAsync.ts"],"names":[],"mappings":";;;AACA,iDAAiF;AAEjF,0CAMqB;AAed,KAAK,UAAU,mBAAmB,CAAC,WAAmB,EAAE,YAA0B;IACvF,iCAAsB,CAAC,WAAW,CAAC,CAAC;IAEpC,IAAI,IAAY,CAAC;IAEjB,IAAI,YAAY,CAAC,SAAS,IAAI,IAAI,EAAE;QAClC,sEAAsE;QACtE,IAAI,GAAG,YAAY,CAAC,SAAS,CAAC;KAC/B;SAAM;QACL,IAAI,GAAG,YAAY,CAAC,SAAS;YAC3B,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,IAAI,IAAI;YAC5C,CAAC,CAAC,MAAM,2BAAgB,CAAC,KAAK,CAAC,CAAC;KACnC;IACD,MAAM,0BAAe,CAAC,oBAAoB,CAAC,WAAW,EAAE;QACtD,cAAc,EAAE,IAAI;QACpB,YAAY,EAAE,IAAI;KACnB,CAAC,CAAC;IAEH,MAAM,OAAO,GAA0B;QACrC,IAAI;QACJ,MAAM,EAAE,uBAAY,CAAC,SAAS,CAAC,WAAW,CAAC;QAC3C,cAAc;QACd,MAAM,EAAE,YAAY,CAAC,MAAM;KAC5B,CAAC;IACF,IAAI,YAAY,CAAC,KAAK,EAAE;QACtB,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;KAC3B;IACD,IAAI,YAAY,CAAC,UAAU,IAAI,IAAI,EAAE;QACnC,OAAO,CAAC,UAAU,GAAG,YAAY,CAAC,UAAU,CAAC;KAC9C;IAED,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,GAAG,MAAM,mCAAsB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;IACjG,UAAU,CAAC,GAAG,CAAC,0BAAe,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;IAChE,OAAO,CAAC,MAAM,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;AAC7C,CAAC;AAlCD,kDAkCC","sourcesContent":["import { ProjectTarget } from '@expo/config';\nimport { MetroDevServerOptions, runMetroDevServerAsync } from '@expo/dev-server';\n\nimport {\n  assertValidProjectRoot,\n  getFreePortAsync,\n  ManifestHandler,\n  ProjectSettings,\n  ProjectUtils,\n} from '../internal';\n\nexport type StartOptions = {\n  metroPort?: number;\n  isWebSocketsEnabled?: boolean;\n  isRemoteReloadingEnabled?: boolean;\n  devClient?: boolean;\n  reset?: boolean;\n  nonInteractive?: boolean;\n  nonPersistent?: boolean;\n  maxWorkers?: number;\n  webOnly?: boolean;\n  target?: ProjectTarget;\n};\n\nexport async function startDevServerAsync(projectRoot: string, startOptions: StartOptions) {\n  assertValidProjectRoot(projectRoot);\n\n  let port: number;\n\n  if (startOptions.metroPort != null) {\n    // If the manually defined port is busy then an error should be thrown\n    port = startOptions.metroPort;\n  } else {\n    port = startOptions.devClient\n      ? Number(process.env.RCT_METRO_PORT) || 8081\n      : await getFreePortAsync(19000);\n  }\n  await ProjectSettings.setPackagerInfoAsync(projectRoot, {\n    expoServerPort: port,\n    packagerPort: port,\n  });\n\n  const options: MetroDevServerOptions = {\n    port,\n    logger: ProjectUtils.getLogger(projectRoot),\n    // @deprecated\n    target: startOptions.target,\n  };\n  if (startOptions.reset) {\n    options.resetCache = true;\n  }\n  if (startOptions.maxWorkers != null) {\n    options.maxWorkers = startOptions.maxWorkers;\n  }\n\n  const { server, middleware, messageSocket } = await runMetroDevServerAsync(projectRoot, options);\n  middleware.use(ManifestHandler.getManifestHandler(projectRoot));\n  return [server, middleware, messageSocket];\n}\n"]}