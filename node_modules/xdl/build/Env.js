"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldUseDevServer = exports.maySkipManifestValidation = exports.isLocal = exports.isStaging = exports.isDebug = void 0;
const getenv_1 = __importDefault(require("getenv"));
const internal_1 = require("./internal");
function isDebug() {
    return getenv_1.default.boolish('EXPO_DEBUG', false);
}
exports.isDebug = isDebug;
function isStaging() {
    return getenv_1.default.boolish('EXPO_STAGING', false);
}
exports.isStaging = isStaging;
function isLocal() {
    return getenv_1.default.boolish('EXPO_LOCAL', false);
}
exports.isLocal = isLocal;
function maySkipManifestValidation() {
    return !!getenv_1.default.string('EXPO_SKIP_MANIFEST_VALIDATION_TOKEN');
}
exports.maySkipManifestValidation = maySkipManifestValidation;
/**
 * Returns true if we should use Metro using its JS APIs via @expo/dev-server (the modern and fast
 * way), false if we should fall back to spawning it as a subprocess (supported for backwards
 * compatibility with SDK39 and older).
 */
function shouldUseDevServer(exp) {
    return internal_1.Versions.gteSdkVersion(exp, '40.0.0') || getenv_1.default.boolish('EXPO_USE_DEV_SERVER', false);
}
exports.shouldUseDevServer = shouldUseDevServer;
//# sourceMappingURL=Env.js.map